// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SimbirGo.Bll.DbConfiguration;

#nullable disable

namespace SimbirGo.Migrations.Migrations
{
    [DbContext(typeof(SimbirGoDbContext))]
    partial class SimbirGoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SimbirGo.Contracts.Models.Payment", b =>
                {
                    b.Property<string>("PaymentID")
                        .HasColumnType("text")
                        .HasColumnName("PaymentID");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("Amount");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("PaymentDate");

                    b.Property<string>("RentalID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RentalID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Status");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserID");

                    b.HasKey("PaymentID")
                        .HasName("payment_pkey");

                    b.HasIndex("RentalID")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("SimbirGo.Contracts.Models.Rental", b =>
                {
                    b.Property<string>("RentalID")
                        .HasColumnType("text")
                        .HasColumnName("RentalID");

                    b.Property<double?>("FinalPrice")
                        .IsRequired()
                        .HasColumnType("double precision")
                        .HasColumnName("FinalPrice");

                    b.Property<double>("PriceOfUnit")
                        .HasColumnType("double precision")
                        .HasColumnName("PriceOfUnit");

                    b.Property<int>("PriceType")
                        .HasColumnType("integer")
                        .HasColumnName("PriceType");

                    b.Property<DateTime?>("TimeEnd")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TimeEnd");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TimeStart");

                    b.Property<string>("TransportID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TransportID");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserID");

                    b.HasKey("RentalID")
                        .HasName("rental_pkey");

                    b.HasIndex("TransportID");

                    b.HasIndex("UserID");

                    b.ToTable("Rentals", (string)null);
                });

            modelBuilder.Entity("SimbirGo.Contracts.Models.Transport", b =>
                {
                    b.Property<string>("TransportID")
                        .HasColumnType("text")
                        .HasColumnName("TransportID");

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean")
                        .HasColumnName("Availability");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Model");

                    b.Property<double>("PricePerDay")
                        .HasColumnType("double precision")
                        .HasColumnName("PricePerDay");

                    b.Property<double>("PricePerMinute")
                        .HasColumnType("double precision")
                        .HasColumnName("PricePerMinute");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RegistrationNumber");

                    b.Property<int>("TransportType")
                        .HasColumnType("integer")
                        .HasColumnName("TransportType");

                    b.HasKey("TransportID")
                        .HasName("transport_pkey");

                    b.ToTable("Transports", (string)null);
                });

            modelBuilder.Entity("SimbirGo.Contracts.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("text")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Role");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Username");

                    b.HasKey("UserID")
                        .HasName("user_pkey");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SimbirGo.Contracts.Models.Payment", b =>
                {
                    b.HasOne("SimbirGo.Contracts.Models.Rental", "Rental")
                        .WithOne("Payment")
                        .HasForeignKey("SimbirGo.Contracts.Models.Payment", "RentalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("payment_id_rental_fkey");

                    b.HasOne("SimbirGo.Contracts.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("payment_id_user_fkey");

                    b.Navigation("Rental");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimbirGo.Contracts.Models.Rental", b =>
                {
                    b.HasOne("SimbirGo.Contracts.Models.Transport", "Transport")
                        .WithMany("Rentals")
                        .HasForeignKey("TransportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rental_id_transport_fkey");

                    b.HasOne("SimbirGo.Contracts.Models.User", "User")
                        .WithMany("Rentals")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rental_id_user_fkey");

                    b.Navigation("Transport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SimbirGo.Contracts.Models.Rental", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("SimbirGo.Contracts.Models.Transport", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("SimbirGo.Contracts.Models.User", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
